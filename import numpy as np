import numpy as np
import cv2
import thinning

cap = cv2.VideoCapture("dance.mov")


ret, frame = cap.read()
fgmask = fgbg.apply(frame)
while(1):
    ret, frame2 = cap.read()
    diff = cv2.absdiff(frame, frame2)
    diff = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)

    ret,fgmask = cv2.threshold(diff,40,255,cv2.THRESH_BINARY)

    # dilate the thresholded image to fill in holes, then find contours
    # on thresholded image
    thresh = cv2.dilate(fgmask, None, iterations=2)
    (cnts, _) = cv2.findContours(thresh.copy(), cv2.RETR_EXTERNAL,
        cv2.CHAIN_APPROX_SIMPLE)
 
    # loop over the contours
    for c in cnts:
        # if the contour is too small, ignore it
        if cv2.contourArea(c) < args["min_area"]:
            continue
 
        # compute the bounding box for the contour, draw it on the frame,
        # and update the text
        (x, y, w, h) = cv2.boundingRect(c)
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        text = "Occupied"

    frame = frame2
    cv2.imshow("output",fgmask)
    k = cv2.waitKey(30) & 0xff
    if k == 27:
        break

cap.release()
cv2.destroyAllWindows()

